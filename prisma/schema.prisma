generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  address String  @db.String
  city    String?
  state   String?
  zip     String?
  country String?

  contacts  Contact[]
  products  Product[]
  services  Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Contact {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  clientId       String  @db.ObjectId
  name           String
  email          String
  phone          String
  addressDetails String? @db.String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Client            Client              @relation(fields: [clientId], references: [id])
  ProductOfInterest ProductOfInterest[]
  ServiceOfInterest ServiceOfInterest[]
  Prospects         Prospect[]
}

model Product {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  reference    String
  name         String
  description  String? @db.String
  price        Float
  priceWithTax Float
  clientId     String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contactId String?  @db.ObjectId

  Client          Client?             @relation(fields: [clientId], references: [id])
  InterestedUsers ProductOfInterest[]
}

model Service {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  clientId     String  @db.ObjectId
  contract     String
  name         String
  description  String? @db.String
  price        Float
  priceWithTax Float

  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  Client          Client              @relation(fields: [clientId], references: [id])
  InterestedUsers ServiceOfInterest[]
}

model ProductOfInterest {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  contactId String @db.ObjectId
  productId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Contact   Contact  @relation(fields: [contactId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])
}

model ServiceOfInterest {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  contactId String @db.ObjectId
  serviceId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Contact   Contact  @relation(fields: [contactId], references: [id])
  Service   Service  @relation(fields: [serviceId], references: [id])
}

model Prospect {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  contactId String @db.ObjectId
  type      String
  discount  Float

  Contact   Contact  @relation(fields: [contactId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
